{
	"info": {
		"_postman_id": "2b77f76a-9e29-4c5f-9682-f561792c9249",
		"name": "Goit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44727094",
		"_collection_link": "https://lively-flare-2651674.postman.co/workspace/GoIT-%25C3%2596dev~fa3f2bb3-0b0e-4fd6-aa93-cfa65857bdbb/collection/44727094-2b77f76a-9e29-4c5f-9682-f561792c9249?action=share&source=collection_link&creator=44727094"
	},
	"item": [
		{
			"name": "Create a boards",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/?name=begum&key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "begum"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new List top",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('closed');\r",
							"    pm.expect(responseData).to.have.property('idBoard');\r",
							"    pm.expect(responseData).to.have.property('pos');\r",
							"    pm.expect(responseData).to.have.property('type');\r",
							"    pm.expect(responseData).to.have.property('datasource');\r",
							"    pm.expect(responseData).to.have.property('limits');\r",
							"});\r",
							"\r",
							"pm.test(\"Closed field must be a boolean\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.closed).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the presence and properties of 'datasource' object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.datasource).to.exist;\r",
							"    pm.expect(responseData.datasource.filter).to.exist;\r",
							"});\r",
							"\r",
							"// Updated response time test to 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Test to check if the 'name' field is a string\r",
							"pm.test(\"Name field must be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.name).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists?name=letf&idBoard=68225410fc87b2825339a63a&key={{apiKey}}&token={{apiToken}}&pos=top",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "letf"
						},
						{
							"key": "idBoard",
							"value": "68225410fc87b2825339a63a"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "pos",
							"value": "top"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new List bottom",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('id');\r",
							"  pm.expect(responseData).to.have.property('name');\r",
							"  pm.expect(responseData).to.have.property('closed');\r",
							"  pm.expect(responseData).to.have.property('idBoard');\r",
							"  pm.expect(responseData).to.have.property('pos');\r",
							"  pm.expect(responseData).to.have.property('type');\r",
							"  pm.expect(responseData).to.have.property('datasource');\r",
							"  pm.expect(responseData).to.have.property('limits');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id field should be a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Name field should be a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Closed field should be a boolean\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.closed).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Color field should be a null or a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.color).to.satisfy((value) => value === null || typeof value === 'string');\r",
							"});\r",
							"\r",
							"pm.test(\"IdBoard field should be a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.idBoard).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Pos field should be a number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.pos).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Type field should be a null or a string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.type).to.satisfy((value) => value === null || typeof value === 'string');\r",
							"});\r",
							"\r",
							"pm.test(\"Datasource should be an object with filter property as boolean\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.datasource).to.be.an('object');\r",
							"  pm.expect(responseData.datasource.filter).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Limits field should be an object\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.limits).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'datasource' object contains the expected properties and their types\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.datasource).to.be.an('object');\r",
							"    pm.expect(responseData.datasource.filter).to.be.a('boolean');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists?name=Right&idBoard=68225410fc87b2825339a63a&key={{apiKey}}&token={{apiToken}}&pos=bottom",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "Right"
						},
						{
							"key": "idBoard",
							"value": "68225410fc87b2825339a63a"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "pos",
							"value": "bottom"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id, badges, closed, dueComplete, name, pinned, url, and isTemplate fields exist in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.badges).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.closed).to.exist;\r",
							"    pm.expect(responseData.dueComplete).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.pinned).to.exist;\r",
							"    pm.expect(responseData.url).to.exist;\r",
							"    pm.expect(responseData.isTemplate).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check for empty 'checkItemStates', 'attachments', and 'stickers' arrays\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.checkItemStates).to.be.an('array').that.is.empty;\r",
							"    pm.expect(responseData.attachments).to.be.an('array').that.is.empty;\r",
							"    pm.expect(responseData.stickers).to.be.an('array').that.is.empty;\r",
							"});\r",
							"pm.test(\"id is a string\", function () {\r",
							"  pm.expect(typeof pm.response.json().id).to.eql('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://api.trello.com/1/cards?idList=68225d6b9f31d78a50d74c8b&key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "68225d6b9f31d78a50d74c8b"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id field is present and not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('id').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Badges object schema is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.badges).to.be.an('object');\r",
							"    pm.expect(responseData.badges).to.have.property('attachments');\r",
							"    pm.expect(responseData.badges).to.have.property('fogbugz');\r",
							"    pm.expect(responseData.badges).to.have.property('checkItems');\r",
							"    pm.expect(responseData.badges).to.have.property('checkItemsChecked');\r",
							"    pm.expect(responseData.badges).to.have.property('checkItemsEarliestDue');\r",
							"    pm.expect(responseData.badges).to.have.property('comments');\r",
							"    pm.expect(responseData.badges).to.have.property('description');\r",
							"    pm.expect(responseData.badges).to.have.property('due');\r",
							"    pm.expect(responseData.badges).to.have.property('dueComplete');\r",
							"    pm.expect(responseData.badges).to.have.property('lastUpdatedByAi');\r",
							"    pm.expect(responseData.badges).to.have.property('start');\r",
							"    pm.expect(responseData.badges).to.have.property('externalSource');\r",
							"    pm.expect(responseData.badges).to.have.property('attachmentsByType');\r",
							"    pm.expect(responseData.badges.attachmentsByType).to.be.an('object');\r",
							"    pm.expect(responseData.badges.attachmentsByType).to.have.property('trello');\r",
							"    pm.expect(responseData.badges).to.have.property('location');\r",
							"    pm.expect(responseData.badges).to.have.property('votes');\r",
							"    pm.expect(responseData.badges).to.have.property('maliciousAttachments');\r",
							"    pm.expect(responseData.badges).to.have.property('viewingMemberVoted');\r",
							"    pm.expect(responseData.badges).to.have.property('subscribed');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CheckItemStates array should be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.checkItemStates).to.be.an('array').that.is.empty;\r",
							"});\r",
							"pm.test(\"id is a string\", function () {\r",
							"  pm.expect(typeof pm.response.json().id).to.eql('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://api.trello.com/1/cards?idList=68225a632d233f3028d68a13&key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "68225a632d233f3028d68a13"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.limits).to.exist.and.to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Limits object is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.limits).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/cards/682263c2ce7a280ea748d10b?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"682263c2ce7a280ea748d10b"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Cards on a Board",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/68225410fc87b2825339a63a/cards?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"68225410fc87b2825339a63a",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the board object schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.desc).to.exist;\r",
							"    pm.expect(responseData.closed).to.exist;\r",
							"    pm.expect(responseData.idOrganization).to.exist;\r",
							"    pm.expect(responseData.pinned).to.exist;\r",
							"    pm.expect(responseData.url).to.exist;\r",
							"    pm.expect(responseData.prefs).to.exist;\r",
							"    pm.expect(responseData.labelNames).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Preferences object contains required fields and data types\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.prefs).to.be.an('object');\r",
							"    pm.expect(responseData.prefs.permissionLevel).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.hideVotes).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.voting).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.comments).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.invitations).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.selfJoin).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.cardCovers).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.showCompleteStatus).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.cardCounts).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.isTemplate).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.cardAging).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.calendarFeedEnabled).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.hiddenPluginBoardButtons).to.be.an('array');\r",
							"    responseData.prefs.hiddenPluginBoardButtons.forEach(function(button) {\r",
							"        pm.expect(button).to.be.an('object');\r",
							"    });\r",
							"    pm.expect(responseData.prefs.switcherViews).to.be.an('array');\r",
							"    responseData.prefs.switcherViews.forEach(function(view) {\r",
							"        pm.expect(view.viewType).to.be.a('string');\r",
							"        pm.expect(view.enabled).to.be.a('boolean');\r",
							"    });\r",
							"    pm.expect(responseData.prefs.autoArchive).to.be.null;\r",
							"    pm.expect(responseData.prefs.background).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.backgroundColor).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.backgroundDarkColor).to.be.null;\r",
							"    pm.expect(responseData.prefs.backgroundImage).to.be.null;\r",
							"    pm.expect(responseData.prefs.backgroundDarkImage).to.be.null;\r",
							"    pm.expect(responseData.prefs.backgroundImageScaled).to.be.null;\r",
							"    pm.expect(responseData.prefs.backgroundTile).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.backgroundBrightness).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.sharedSourceUrl).to.be.null;\r",
							"    pm.expect(responseData.prefs.backgroundBottomColor).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.backgroundTopColor).to.be.a('string');\r",
							"    pm.expect(responseData.prefs.canBePublic).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.canBeEnterprise).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.canBeOrg).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.canBePrivate).to.be.a('boolean');\r",
							"    pm.expect(responseData.prefs.canInvite).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Label names object contains all color names as non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.labelNames).to.be.an('object');\r",
							"  \r",
							"  const colorNames = Object.keys(responseData.labelNames);\r",
							"  colorNames.forEach(color => {\r",
							"    pm.expect(color).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/68226a8fc38d2935c0c3e8f1?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"68226a8fc38d2935c0c3e8f1"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		}
	]
}